//qwt_plot
//qwt
#include <qwt_plot.h>  
#include <qwt_plot_layout.h>  
#include <qwt_plot_canvas.h>  
#include <qwt_plot_renderer.h>  
#include <qwt_plot_grid.h>  
#include <qwt_plot_histogram.h>  
#include <qwt_plot_curve.h>  
#include <qwt_plot_zoomer.h>  
#include <qwt_plot_panner.h>  
#include <qwt_plot_magnifier.h>  
#include <qwt_legend.h>  
#include <qwt_legend_label.h>  
#include <qwt_column_symbol.h>  
#include <qwt_series_data.h>  
#include <qpen.h>  
#include <qwt_symbol.h>  
#include <qwt_picker_machine.h>  
#include "qwt_date_scale_draw.h"
//qwt
    QwtPlotCurve *curve_temp_toplimit;
	QwtPlotCurve *curve_temp_1;
	QwtPlotCurve *curve_temp_2;
	QwtPlotCurve *curve_temp_3;
	QwtPlotCurve *curve_temp_4;
	QwtPlotCurve *curve_temp_5;		
	QwtPlotCurve *curve_temp_6;
	QwtPlotCurve *curve_temp_7;
	QwtPlotCurve *curve_temp_8;

	QVector<double> xdata_time_temp;
	QVector<double> ydata_curve_temp_toplimit;
	QVector<double> ydata_curve_temp_1;
	QVector<double> ydata_curve_temp_2;
	QVector<double> ydata_curve_temp_3;
	QVector<double> ydata_curve_temp_4;
	QVector<double> ydata_curve_temp_5;
	QVector<double> ydata_curve_temp_6;
	QVector<double> ydata_curve_temp_7;
	QVector<double> ydata_curve_temp_8;

	QVector<double> temp_data_cache[ARM_COUNT][TOOL_ARM_MOTOR_PARAM_COUNT]; //缓存所有臂的温度数据

	bool stop_plot_flag_temp;
	QwtPlotZoomer *zoomer_2;
	
class TimeScakeDrawR: public QwtScaleDraw{
    public:
    TimeScakeDrawR(const QDateTime &base):baseTime(base){
    }
    virtual QwtText label(double v) const
    {
      QDateTime upTime = baseTime.addSecs((int )v * EPOS_TEMP_FETCH_INTERVAL); //5s
      return upTime.toString("hh:mm:ss");
    }
    private:
    QDateTime baseTime;

};	
	
void widget::initQwtWidgetTemp(QwtPlot *qwtplot)
{
	QString demoName = " 电机温度曲线 ";
	qwtplot->setTitle(demoName);
	qwtplot->setCanvasBackground(Qt::white);//背景
	// qwtplot->insertLegend(new QwtLegend(), QwtPlot::RightLegend);//标签
	qwtplot->setStyleSheet("color:rgb(255, 255, 255);");

	m_baseTime = QDateTime::currentDateTime();
	qwtplot->setAxisTitle(QwtPlot::xBottom, "时间 (s)");
	qwtplot->setAxisTitle(QwtPlot::yLeft, "温度（℃）");
	qwtplot->setAxisScale(QwtPlot::yLeft, 0, MAX_Y_AXIS_SCALE_TEMP, MAX_Y_AXIS_SCALE_TEMP / 10);

	zoomer_2 = new QwtPlotZoomer(ui.qwtplot_temp_curve->canvas());
	zoomer_2->setRubberBandPen(QColor(Qt::blue));
	zoomer_2->setTrackerPen(QColor(Qt::black));
	zoomer_2->setMousePattern(QwtEventPattern::MouseSelect2, Qt::RightButton, Qt::ControlModifier);//左键放大，ctrl + 右键恢复原样
	zoomer_2->setMousePattern(QwtEventPattern::MouseSelect3, Qt::RightButton);
	QwtPlotGrid *grid = new QwtPlotGrid();
	grid->enableX(true);//设置网格线
	grid->enableY(true);
	grid->setMajorPen(Qt::black, 0, Qt::DotLine);
	grid->attach(qwtplot);

	curve_temp_toplimit = new QwtPlotCurve("上限");
	curve_temp_toplimit->setPen(Qt::red, CURVE_LINE_WIDTH); //曲线的颜色 宽度;
	curve_temp_toplimit->setRenderHint(QwtPlotItem::RenderAntialiased, true);//线条光滑化

	curve_temp_1 = new QwtPlotCurve("进给轴");
	curve_temp_1->setPen(Qt::blue, CURVE_LINE_WIDTH); //曲线的颜色 宽度;
	curve_temp_1->setRenderHint(QwtPlotItem::RenderAntialiased, true);//线条光滑化

	curve_temp_2 = new QwtPlotCurve("旋转轴");
	curve_temp_2->setPen(Qt::yellow, CURVE_LINE_WIDTH); //曲线的颜色 宽度;
	curve_temp_2->setRenderHint(QwtPlotItem::RenderAntialiased, true);//线条光滑化

	curve_temp_3 = new QwtPlotCurve("螺杆3");
	curve_temp_3->setPen(Qt::cyan, CURVE_LINE_WIDTH); //曲线的颜色 宽度;
	curve_temp_3->setRenderHint(QwtPlotItem::RenderAntialiased, true);//线条光滑化

	curve_temp_4 = new QwtPlotCurve("螺杆4");
	curve_temp_4->setPen(Qt::green, CURVE_LINE_WIDTH); //曲线的颜色 宽度;
	curve_temp_4->setRenderHint(QwtPlotItem::RenderAntialiased, true);//线条光滑化

	curve_temp_5 = new QwtPlotCurve("螺杆2");
	curve_temp_5->setPen(Qt::black, CURVE_LINE_WIDTH); //曲线的颜色 宽度;
	curve_temp_5->setRenderHint(QwtPlotItem::RenderAntialiased, true);//线条光滑化

	curve_temp_6 = new QwtPlotCurve("螺杆1");
	curve_temp_6->setPen(Qt::gray, CURVE_LINE_WIDTH); //曲线的颜色 宽度;
	curve_temp_6->setRenderHint(QwtPlotItem::RenderAntialiased, true);//线条光滑化

	curve_temp_7 = new QwtPlotCurve("锁紧轴");
	curve_temp_7->setPen(Qt::darkRed, CURVE_LINE_WIDTH); //曲线的颜色 宽度;
	curve_temp_7->setRenderHint(QwtPlotItem::RenderAntialiased, true);//线条光滑化

	curve_temp_8 = new QwtPlotCurve("夹钳");
	curve_temp_8->setPen(Qt::darkYellow, CURVE_LINE_WIDTH); //曲线的颜色 宽度;
	curve_temp_8->setRenderHint(QwtPlotItem::RenderAntialiased, true);//线条光滑化

	QwtLegend *legend_2 = new QwtLegend;
	legend_2->setDefaultItemMode(QwtLegendData::Checkable);//图例可被点击  
	qwtplot->insertLegend(legend_2, QwtPlot::RightLegend);
	connect(legend_2, SIGNAL(checked(const QVariant &, bool, int)),SLOT(showItemTemp(const QVariant &, bool)));//点击图例操作  

	curveDrawingTemp();

	curve_temp_toplimit->setVisible(false);
	curve_temp_1->setVisible(false);
	curve_temp_2->setVisible(false);
	curve_temp_3->setVisible(false);
	curve_temp_4->setVisible(false);
	curve_temp_5->setVisible(false);
	curve_temp_6->setVisible(false);
	curve_temp_7->setVisible(false);
	curve_temp_8->setVisible(false);
}

void sr_trolley_mfg::curveDrawingTemp()
{
	curve_temp_toplimit->setSamples(xdata_time_temp, ydata_curve_temp_toplimit);
	curve_temp_toplimit->attach(ui.qwtplot_temp_curve);

	curve_temp_1->setSamples(xdata_time_temp, ydata_curve_temp_1);
	curve_temp_1->attach(ui.qwtplot_temp_curve);

	curve_temp_2->setSamples(xdata_time_temp, ydata_curve_temp_2);
	curve_temp_2->attach(ui.qwtplot_temp_curve);

	curve_temp_3->setSamples(xdata_time_temp, ydata_curve_temp_3);
	curve_temp_3->attach(ui.qwtplot_temp_curve);

	curve_temp_4->setSamples(xdata_time_temp, ydata_curve_temp_4);
	curve_temp_4->attach(ui.qwtplot_temp_curve);

	curve_temp_5->setSamples(xdata_time_temp, ydata_curve_temp_5);
	curve_temp_5->attach(ui.qwtplot_temp_curve);

	curve_temp_6->setSamples(xdata_time_temp, ydata_curve_temp_6);
	curve_temp_6->attach(ui.qwtplot_temp_curve);

	curve_temp_7->setSamples(xdata_time_temp, ydata_curve_temp_7);
	curve_temp_7->attach(ui.qwtplot_temp_curve);

	curve_temp_8->setSamples(xdata_time_temp, ydata_curve_temp_8);
	curve_temp_8->attach(ui.qwtplot_temp_curve);

	ui.qwtplot_temp_curve->replot();

	// qDebug()<<"drawing!!!!!!!!!!!!!!!!!!!!";
}

void sr_trolley_mfg::plotTempCurve(int arm_index)
{

	int sample_times_temp = temp_data_cache[arm_index][0].size();//有多少个数据

	xdata_time_temp.clear();
	ydata_curve_temp_1.clear();
	ydata_curve_temp_2.clear();
	ydata_curve_temp_3.clear();
	ydata_curve_temp_4.clear();
	ydata_curve_temp_5.clear();
	ydata_curve_temp_6.clear();
	ydata_curve_temp_7.clear();
	ydata_curve_temp_8.clear();

	ydata_curve_temp_1 = temp_data_cache[arm_index][0];
	ydata_curve_temp_2 = temp_data_cache[arm_index][1];
	ydata_curve_temp_3 = temp_data_cache[arm_index][2];
	ydata_curve_temp_4 = temp_data_cache[arm_index][3];
	ydata_curve_temp_5 = temp_data_cache[arm_index][4];
	ydata_curve_temp_6 = temp_data_cache[arm_index][5];
	ydata_curve_temp_7 = temp_data_cache[arm_index][6];
	ydata_curve_temp_8 = temp_data_cache[arm_index][7];

	static bool is_first_paint = true;
	if(is_first_paint){
		m_baseTime = QDateTime::currentDateTime();
		is_first_paint = false;

		ui.qwtplot_temp_curve->setAxisScaleDraw(QwtPlot::xBottom, new TimeScakeDrawR(m_baseTime));
	}
	
	qint64 timeVal = (QDateTime::currentDateTime().toMSecsSinceEpoch()-m_baseTime.toMSecsSinceEpoch())/1000; //打开页面到现在过去了多少秒
	timeVal = timeVal / EPOS_TEMP_FETCH_INTERVAL;

    for ( int j = 0; j < sample_times_temp; j++){

        xdata_time_temp.append(j);
    }
	
    ui.qwtplot_temp_curve->setAxisScale(QwtPlot::xBottom, 0, timeVal + 1); //右边多画一格
    /* 绘图 */
	if (!stop_plot_flag_temp)
	{
		curveDrawingTemp();
	}
}
