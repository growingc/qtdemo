#include <QtWidgets/QWidget>
#include <QtUiPlugin/QDesignerExportWidget>
#include <QLabel>
#include <QPushButton>
#include <qdom.h>
#include <QEvent>
#include <QRadioButton>
#include <QButtonGroup>
#include <QListView>
#include <QDateEdit>
#include "ui_data_define.h"
#include <QObjectUserData>
#include <QSortFilterProxyModel>
#include <QCalendarWidget>
#include <QDebug>
#include <nbus/msg/common_def.h>
#include "plugin_interface.h"
#include <QStyledItemDelegate>
#include <QModelIndex>
#include <QStandardItemModel>

#define LOG_WIDGET_INFO_FILTER_MAX_LEVEL 4
class LogListViewWidget;
class ItemData;
class ItemDelegate;
class QDESIGNER_WIDGET_EXPORT LogWidget : public QWidget, public PluginInterface {
    Q_OBJECT
    Q_PROPERTY(int id MEMBER m_id)
    Q_PROPERTY(int is_display READ readIsDisplay WRITE setIsDisplay)
    Q_PROPERTY(QString log_path MEMBER m_log_path)
public:
    LogWidget(QWidget *parent = 0);
    ~LogWidget();
    void init(QDomNode node, QRect rect);
    void setQiconPath(QString path) {
        m_qicon_path = path;
    }
    int readIsDisplay() {
        return m_is_visible;
    }
    void setIsDisplay(int is_display);
    void shUiXcuEven(ushort param, ushort status);
    void setFont(QFont font);
    void scrollListView(int d);

    void msgHandler(char *msg);

protected:
    virtual void changeEvent(QEvent *event) override;

private:
    void retranslateUi();
    void initFillterBtn();
    void initFont();
    void addText(QString msg);
    bool logAccessGranted(const int &log_user_type);
    void updateNewData(const QVector<ItemData *> &items, bool force_update);
    void setCurrentUserID(U32 id, NBUS_NS::UserType  type) {
        user_id = QString::number(id);
        user_type = type;
    }
    QStringList getLogFiles(const QString &select_type);
    void updateFileLists();
private slots:
    void onClickClose();
    void srUiUpdateSlot();
    void onClickDate(const QDate &);
    void filterButtonGroupClicked(int);
    void onDateButtonClickSlot();
signals:
    void srUiUpdateSignal();

private:
    QRect m_self_rect;
    QLabel *m_popup_bg_label;
    QWidget *m_widget;
    QLabel *m_widget_label;
    QLabel *m_title_label;
    QPushButton *m_close_btn;
    LogListViewWidget *m_listview;
    QPushButton *m_date_button;
    QCalendarWidget *m_calender_widget;
    QScrollBar *m_scrollbar;
    QPoint presspos;
    QPoint movepos;
    QPoint releasepos;

    QButtonGroup *filter_button_group;
    QRadioButton *filter_button[LOG_WIDGET_INFO_FILTER_MAX_LEVEL];
    QString filter_text[LOG_WIDGET_INFO_FILTER_MAX_LEVEL];
    int m_id;
    QString m_qicon_path;
    int m_is_visible;
    int m_param;
    QString m_log_path;

    ItemDelegate *m_delegate;
    QSortFilterProxyModel *m_proxy_model;
    QStandardItemModel *m_model;
    int last_view_cell_count;
    QFont m_icofont;
    QString user_id;
    NBUS_NS::UserType  user_type;
    int m_scrollbar_max;
    QStringList log_file_list;
    QDate log_date;
};

class LogListViewWidget : public QListView {
    Q_OBJECT
public:
    LogListViewWidget(LogWidget *parent);
    ~LogListViewWidget();

private:
    QPoint presspos;
    QPoint movepos;
    QPoint releasepos;
    LogWidget *m_parent;

protected:
    virtual void mousePressEvent(QMouseEvent *event);
    virtual void mouseMoveEvent(QMouseEvent *event);
};